// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package patricia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PatriciaClient is the client API for Patricia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatriciaClient interface {
	ProcessBlock(ctx context.Context, in *PatriciaBlock, opts ...grpc.CallOption) (*PatriciaBlockResponse, error)
}

type patriciaClient struct {
	cc grpc.ClientConnInterface
}

func NewPatriciaClient(cc grpc.ClientConnInterface) PatriciaClient {
	return &patriciaClient{cc}
}

func (c *patriciaClient) ProcessBlock(ctx context.Context, in *PatriciaBlock, opts ...grpc.CallOption) (*PatriciaBlockResponse, error) {
	out := new(PatriciaBlockResponse)
	err := c.cc.Invoke(ctx, "/patricia.Patricia/processBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatriciaServer is the server API for Patricia service.
// All implementations must embed UnimplementedPatriciaServer
// for forward compatibility
type PatriciaServer interface {
	ProcessBlock(context.Context, *PatriciaBlock) (*PatriciaBlockResponse, error)
	mustEmbedUnimplementedPatriciaServer()
}

// UnimplementedPatriciaServer must be embedded to have forward compatible implementations.
type UnimplementedPatriciaServer struct {
}

func (UnimplementedPatriciaServer) ProcessBlock(context.Context, *PatriciaBlock) (*PatriciaBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessBlock not implemented")
}
func (UnimplementedPatriciaServer) mustEmbedUnimplementedPatriciaServer() {}

// UnsafePatriciaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatriciaServer will
// result in compilation errors.
type UnsafePatriciaServer interface {
	mustEmbedUnimplementedPatriciaServer()
}

func RegisterPatriciaServer(s grpc.ServiceRegistrar, srv PatriciaServer) {
	s.RegisterService(&Patricia_ServiceDesc, srv)
}

func _Patricia_ProcessBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatriciaBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatriciaServer).ProcessBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/patricia.Patricia/processBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatriciaServer).ProcessBlock(ctx, req.(*PatriciaBlock))
	}
	return interceptor(ctx, in, info, handler)
}

// Patricia_ServiceDesc is the grpc.ServiceDesc for Patricia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Patricia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "patricia.Patricia",
	HandlerType: (*PatriciaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "processBlock",
			Handler:    _Patricia_ProcessBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "patricia.proto",
}
